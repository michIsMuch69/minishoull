!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	p,prototype	/function prototypes/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/jean-micheldusserre/Documents/gh_minishell/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240714.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
add_to_table	sources/builtins/export/export_utils.c	/^char **add_to_table(t_table *table, char *new_var)$/;"	f	typeref:typename:char **
arg_management	sources/parsing/expand.c	/^static int	arg_management(t_table *arg, char **envp, int last_exit)$/;"	f	typeref:typename:int	file:
arrow_count	sources/exec/redirections_utils.c	/^int	arrow_count(char *str, char c)$/;"	f	typeref:typename:int
big_loop	sources/exec/heredoc.c	/^static int  big_loop(t_data *data)$/;"	f	typeref:typename:int	file:
build_token	sources/parsing/tokenizer.c	/^static int	build_token(char *prompt, int start, int end, t_table *token)$/;"	f	typeref:typename:int	file:
change_value	sources/parsing/expand_utils.c	/^int	change_value(char **token, char **envp, int last_exit)$/;"	f	typeref:typename:int
check_all	sources/exec/redirections_utils.c	/^int check_all(t_table infile)$/;"	f	typeref:typename:int
check_all_dirs	sources/exec/build_exec_path.c	/^int check_all_dirs(t_data *data, char **directory)$/;"	f	typeref:typename:int
check_content	libft/src/get_next_line.c	/^int	check_content(char *tmp)$/;"	f	typeref:typename:int
check_data	libft/src/ft_printf.c	/^static int	check_data(const char **flag, va_list args)$/;"	f	typeref:typename:int	file:
check_overflow	libft/src/ft_atoi.c	/^int	check_overflow(long result, const char *nptr, size_t index, int sign)$/;"	f	typeref:typename:int
child_routine	sources/exec/exec.c	/^static int child_routine(t_data *data, int tab_size, int i, int **fd)$/;"	f	typeref:typename:int	file:
clean_token	sources/parsing/cleaner.c	/^static int	clean_token(t_table args, t_table tmp)$/;"	f	typeref:typename:int	file:
clear_buff	sources/parsing/pre_treatment_utils.c	/^void	clear_buff(char *buffer, int start, int size)$/;"	f	typeref:typename:void
clear_buffer	libft/src/get_next_line_utils.c	/^void	clear_buffer(char *buffer, int index)$/;"	f	typeref:typename:void
close_fds	sources/exec/fds_management.c	/^int close_fds(int *in_out_fd)$/;"	f	typeref:typename:int
close_pipes	sources/exec/pipe.c	/^int	close_pipes(int **fds, int size, int i_start, int last_fd)$/;"	f	typeref:typename:int
concate_buffer	libft/src/get_next_line_utils.c	/^char	*concate_buffer(char *buffer, char *tmp)$/;"	f	typeref:typename:char *
count_p_process	sources/exec/exec_utils.c	/^int count_p_process(t_data *data, int tab_size)$/;"	f	typeref:typename:int
count_separator	libft/src/ft_split.c	/^static size_t	count_separator(const char *s, char c)$/;"	f	typeref:typename:size_t	file:
count_sign	sources/parsing/expand_utils.c	/^int	count_sign(char *str, char sign)$/;"	f	typeref:typename:int
cpy_finalstr	libft/src/get_next_line.c	/^char	*cpy_finalstr(char *tmp, int nb)$/;"	f	typeref:typename:char *
cpy_substr	libft/src/get_next_line_utils.c	/^char	*cpy_substr(char *buffer)$/;"	f	typeref:typename:char *
create_all	sources/exec/redirections_utils.c	/^int  create_all(t_table outfile)$/;"	f	typeref:typename:int
create_quoted_var	sources/builtins/export/export_utils.c	/^char *create_quoted_var(char *key, char *value)$/;"	f	typeref:typename:char *
create_unquoted_var	sources/builtins/export/export_utils.c	/^char *create_unquoted_var(char *key, char *value)$/;"	f	typeref:typename:char *
create_var_without_equals	sources/builtins/export/export_utils.c	/^char *create_var_without_equals(char *key)$/;"	f	typeref:typename:char *
cut_str	sources/parsing/expand_utils.c	/^int	cut_str(char **token, int start, int end)$/;"	f	typeref:typename:int
define_input_fd	sources/exec/redirections.c	/^static int	define_input_fd(t_table infile, t_table heredocs)$/;"	f	typeref:typename:int	file:
destroy_heredocs	sources/main/utils.c	/^void  destroy_heredocs(t_table *heredoc)$/;"	f	typeref:typename:void
double_quote	sources/parsing/quote_management.c	/^static int	double_quote(char *token, t_table tmp)$/;"	f	typeref:typename:int	file:
exec	sources/exec/exec.c	/^int	exec(int tab_size, t_data *data)$/;"	f	typeref:typename:int
exec	sources/main/main.c	/^int		exec(int tab_size, t_data *data);$/;"	p	typeref:typename:int	file:
exec_all	sources/exec/exec.c	/^static int	exec_all(t_data *data, int tab_size, int **fd)$/;"	f	typeref:typename:int	file:
exec_builtin_child	sources/builtins/builtins_exec.c	/^int	exec_builtin_child(t_data *data, int tab_size, int i, int **fd)$/;"	f	typeref:typename:int
exec_builtin_parent	sources/builtins/builtins_exec.c	/^int exec_builtin_parent(t_data *data, int tab_size, int i, int **fd)$/;"	f	typeref:typename:int
exec_found	sources/exec/build_exec_path.c	/^int	exec_found(const char *dirname, char *exec_searched)$/;"	f	typeref:typename:int
exec_redirection	sources/exec/exec.c	/^int exec_redirection(t_data data, int *fds, int last_read);$/;"	p	typeref:typename:int	file:
exec_redirection	sources/exec/fds_management.c	/^int exec_redirection(t_data data, int *fds, int last_read)$/;"	f	typeref:typename:int
expand_file	sources/parsing/expand.c	/^static int	expand_file(t_table *file, char **envp, int last_exit)$/;"	f	typeref:typename:int	file:
expand_management	sources/parsing/expand.c	/^int	expand_management(t_data *data, char **envp, int last_exit)$/;"	f	typeref:typename:int
extract_token	sources/parsing/tokenizer.c	/^static int	extract_token(char *prompt, int *i, char c, t_table *token)$/;"	f	typeref:typename:int	file:
extract_value	sources/parsing/getenv.c	/^static int	extract_value(char *var, char *word, char **var_content)$/;"	f	typeref:typename:int	file:
extract_word	sources/parsing/expand_utils.c	/^static char	*extract_word(char *str, int start)$/;"	f	typeref:typename:char *	file:
fill_struct	sources/parsing/struct_filling.c	/^static int	fill_struct(t_data *struc, t_table *tokens, int *i_tokens)$/;"	f	typeref:typename:int	file:
fill_tab	sources/parsing/struct_filling.c	/^int	fill_tab(t_table *tab, char *token)$/;"	f	typeref:typename:int
fill_table	libft/src/ft_itoa.c	/^static void	fill_table(int n, int numlen, char *dst, int sign)$/;"	f	typeref:typename:void	file:
filter	sources/parsing/pre_treatment_utils.c	/^int	filter(int *i, int i_tmp, char *str, char *tmp)$/;"	f	typeref:typename:int
final_build	sources/parsing/parsing_utils.c	/^char	*final_build(char *token, char c)$/;"	f	typeref:typename:char *
final_build	sources/parsing/quote_management.c	/^char	*final_build(char *token, char c);$/;"	p	typeref:typename:char *	file:
find_end	sources/parsing/expand_utils.c	/^static int	find_end(char *str, int start)$/;"	f	typeref:typename:int	file:
find_end	sources/parsing/parsing_utils.c	/^int	find_end(char *prompt, char c, int *i)$/;"	f	typeref:typename:int
find_type	sources/parsing/struct_filling.c	/^static enum e_rtype	find_type(char *token)$/;"	f	typeref:enum:e_rtype	file:
fork_redir	sources/exec/fds_management.c	/^static int fork_redir(t_data data, int *fds, int last_read)$/;"	f	typeref:typename:int	file:
free_array	sources/exec/exec_utils.c	/^void	free_array(char **array)$/;"	f	typeref:typename:void
free_pipes	sources/exec/pipe.c	/^void  free_pipes(int **tab, int size)$/;"	f	typeref:typename:void
free_struct	sources/main/main.c	/^void	free_struct(t_data *struc, int tab_size);$/;"	p	typeref:typename:void	file:
free_struct	sources/main/utils.c	/^void	free_struct(t_data *struc, int tab_size)$/;"	f	typeref:typename:void
free_tab	sources/main/main.c	/^void	free_tab(t_table *tab, int start);$/;"	p	typeref:typename:void	file:
free_tab	sources/main/utils.c	/^void	free_tab(t_table *tab, int start)$/;"	f	typeref:typename:void
free_tab	sources/parsing/cleaner.c	/^void	free_tab(t_table *tab, int start);$/;"	p	typeref:typename:void	file:
ft_atoi	libft/src/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	libft/src/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/src/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_calloct	libft/src/get_next_line_utils.c	/^char	*ft_calloct(size_t nmemb, size_t size)$/;"	f	typeref:typename:char *
ft_cd	sources/builtins/builtins_parent.c	/^int ft_cd(char **args, char **env)$/;"	f	typeref:typename:int
ft_concat_path	sources/exec/build_exec_path.c	/^char	*ft_concat_path(char *directory, char *prompt)$/;"	f	typeref:typename:char *
ft_copy	libft/src/ft_strtrim.c	/^static char	*ft_copy(char const *s1, char *dst, int left_index, int n)$/;"	f	typeref:typename:char *	file:
ft_dup	sources/exec/fds_management.c	/^int  ft_dup(int read_fd, int write_fd)$/;"	f	typeref:typename:int
ft_echo	sources/builtins/builtins_child.c	/^int ft_echo(char **args)$/;"	f	typeref:typename:int
ft_env	sources/builtins/builtins_child.c	/^int ft_env(char **env)$/;"	f	typeref:typename:int
ft_exit	sources/builtins/builtins_parent.c	/^void	ft_exit(t_data *data, int tab_size, int last_status)$/;"	f	typeref:typename:void
ft_export	sources/builtins/export/export_process.c	/^int ft_export(t_data *data, t_table *export)$/;"	f	typeref:typename:int
ft_export_print	sources/builtins/export/export_process.c	/^int ft_export_print(t_table *export)$/;"	f	typeref:typename:int
ft_free_array	libft/src/ft_split.c	/^static void	ft_free_array(char **array, size_t index)$/;"	f	typeref:typename:void	file:
ft_getenv	sources/exec/build_exec_path.c	/^int	ft_getenv(char *word, char **env, char **var_content);$/;"	p	typeref:typename:int	file:
ft_getenv	sources/main/main.c	/^int     ft_getenv(char *word, char **env, char **var_content);$/;"	p	typeref:typename:int	file:
ft_getenv	sources/parsing/getenv.c	/^int	ft_getenv(char *word, char **env, char **var_content)$/;"	f	typeref:typename:int
ft_isalnum	libft/src/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/src/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/src/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/src/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/src/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/src/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lenstr	libft/src/ft_split.c	/^static size_t	ft_lenstr(const char *s, char c, int start)$/;"	f	typeref:typename:size_t	file:
ft_lstadd_back	libft/src/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *_new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/src/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *_new)$/;"	f	typeref:typename:void
ft_lstclear	libft/src/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/src/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/src/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/src/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/src/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/src/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/src/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/src/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/src/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/src/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/src/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/src/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_numlen	libft/src/ft_itoa.c	/^static int	ft_numlen(int n)$/;"	f	typeref:typename:int	file:
ft_perror	sources/main/main.c	/^int		ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/main/sig_manager.c	/^int		ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/main/utils.c	/^int	ft_perror(char *err_message)$/;"	f	typeref:typename:int
ft_perror	sources/parsing/cleaner.c	/^int		ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/parsing/expand_utils_nd.c	/^int	ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/parsing/getenv.c	/^int	ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/parsing/parsing_utils.c	/^int	ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/parsing/pre_treatment_utils.c	/^int	ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/parsing/quote_management.c	/^int		ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_perror	sources/parsing/struct_filling.c	/^int	ft_perror(char *err_message);$/;"	p	typeref:typename:int	file:
ft_print_minus	libft/src/ft_putnbr_fd.c	/^static int	ft_print_minus(int n, int fd)$/;"	f	typeref:typename:int	file:
ft_printf	libft/src/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/src/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/src/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/src/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/src/ft_putstr_fd.c	/^ssize_t	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:ssize_t
ft_pwd	sources/builtins/builtins_child.c	/^int ft_pwd(void)$/;"	f	typeref:typename:int
ft_realloc	libft/src/ft_realloc.c	/^void	*ft_realloc(void *pointer, size_t memory_size, size_t src_size)$/;"	f	typeref:typename:void *
ft_split	libft/src/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strcat	libft/src/ft_strcat.c	/^char	*ft_strcat(char *dest, char *src)$/;"	f	typeref:typename:char *
ft_strchr	libft/src/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strcmp	sources/exec/exec_utils.c	/^int	ft_strcmp(char *s1, char *s2)$/;"	f	typeref:typename:int
ft_strcpy	libft/src/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f	typeref:typename:char *
ft_strdup	libft/src/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	libft/src/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	libft/src/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/src/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/src/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/src/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/src/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/src/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	libft/src/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/src/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/src/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/src/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tabdup	sources/main/main.c	/^t_table ft_tabdup(char **envp);$/;"	p	typeref:typename:t_table	file:
ft_tabdup	sources/main/utils.c	/^t_table	ft_tabdup(char **envp)$/;"	f	typeref:typename:t_table
ft_tolower	libft/src/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/src/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_unset	sources/builtins/builtins_parent.c	/^int ft_unset(char *var, t_table *env)$/;"	f	typeref:typename:int
get_cmd_path	sources/exec/init_exec.c	/^static int get_cmd_path(t_data *data)$/;"	f	typeref:typename:int	file:
get_next_line	libft/src/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
handle_redirection	sources/exec/redirections.c	/^int handle_redirection(t_data *data)$/;"	f	typeref:typename:int
heredoc_loop	sources/exec/heredoc.c	/^static int heredoc_loop(int fd2, char *token)$/;"	f	typeref:typename:int	file:
heredoc_management	sources/exec/heredoc.c	/^int	heredoc_management(t_data *data, int tab_size)$/;"	f	typeref:typename:int
include_char	sources/parsing/expand_utils_nd.c	/^int	include_char(char *token, char c, int start);$/;"	p	typeref:typename:int	file:
include_char	sources/parsing/parsing_utils.c	/^int	include_char(char *token, char c, int start)$/;"	f	typeref:typename:int
include_char	sources/parsing/tokenizer.c	/^int	include_char(char *token, char c, int start);$/;"	p	typeref:typename:int	file:
include_exitcode	sources/parsing/expand_utils_nd.c	/^int	include_exitcode(char **token, int last_exit)$/;"	f	typeref:typename:int
init_data	sources/main/main.c	/^static t_data	*init_data(char **envp)$/;"	f	typeref:typename:t_data *	file:
init_exec	sources/exec/init_exec.c	/^int init_exec(t_data *data, int tab_size)$/;"	f	typeref:typename:int
init_exported_env	sources/builtins/export/export_process.c	/^int init_exported_env(t_data *data, t_table *export)$/;"	f	typeref:typename:int
init_heredocs	sources/exec/heredoc.c	/^static int init_heredocs(t_data *data)$/;"	f	typeref:typename:int	file:
init_join_str	sources/parsing/expand_utils_nd.c	/^static char	*init_join_str(int size, int *i_str, int *i_tok)$/;"	f	typeref:typename:char *	file:
init_pipe	sources/exec/pipe.c	/^int **init_pipe(t_data *data, int size)$/;"	f	typeref:typename:int **
init_sighandler	sources/main/main.c	/^int		init_sighandler(t_data *data);$/;"	p	typeref:typename:int	file:
init_sighandler	sources/main/sig_manager.c	/^int init_sighandler(t_data *data)$/;"	f	typeref:typename:int
init_str	sources/parsing/parsing_utils.c	/^char	*init_str(char *token, char c)$/;"	f	typeref:typename:char *
init_struct	sources/parsing/struct_filling.c	/^int	init_struct(t_data **data, t_table *tokens, int i_tokens, int i_data)$/;"	f	typeref:typename:int
init_structure	sources/exec/init_exec.c	/^static int  init_structure(t_data *data)$/;"	f	typeref:typename:int	file:
init_tokens	sources/parsing/tokenizer.c	/^static int	init_tokens(t_table *token, char *prompt)$/;"	f	typeref:typename:int	file:
init_treatment	sources/parsing/pre_treatment_utils.c	/^char	*init_treatment(char *prompt, int *i_tmp, int i_prompt)$/;"	f	typeref:typename:char *
is_builtin_child	sources/builtins/builtins_utils.c	/^int	is_builtin_child(t_data *data)$/;"	f	typeref:typename:int
is_builtin_parent	sources/builtins/builtins_utils.c	/^int	is_builtin_parent(t_data *data)$/;"	f	typeref:typename:int
is_executable_path	sources/exec/init_exec.c	/^static int  is_executable_path(t_data *data)$/;"	f	typeref:typename:int	file:
is_numeric_str	sources/builtins/builtins_utils.c	/^int	is_numeric_str(char *str)$/;"	f	typeref:typename:int
is_valid_identifier	sources/builtins/export/export_update.c	/^int is_valid_identifier(char *key)$/;"	f	typeref:typename:int
join_str	sources/parsing/expand_utils_nd.c	/^int	join_str(char **token, int start, int end, char *var_content)$/;"	f	typeref:typename:int
lenstr	libft/src/ft_substr.c	/^static size_t	lenstr(char const *s, unsigned int start)$/;"	f	typeref:typename:size_t	file:
lenstr	libft/src/get_next_line_utils.c	/^size_t	lenstr(char *s)$/;"	f	typeref:typename:size_t
main	sources/main/main.c	/^int main (int argc, char **argv, char **envp)$/;"	f	typeref:typename:int
manage_redirection	sources/exec/fds_management.c	/^int manage_redirection(t_data *data, int tab_size, int i, int **fd)$/;"	f	typeref:typename:int
move_buffer	libft/src/get_next_line.c	/^void	move_buffer(char *buff, int index)$/;"	f	typeref:typename:void
new_tmp_file	sources/exec/heredoc.c	/^static int new_tmp_file(t_table heredoc, int hdocs_i)$/;"	f	typeref:typename:int	file:
parent_routine	sources/builtins/builtins_exec.c	/^int parent_routine(t_data *data, int i, int tab_size, int **fd);$/;"	p	typeref:typename:int	file:
parent_routine	sources/exec/exec.c	/^int parent_routine(t_data *data, int i, int tab_size, int **fd)$/;"	f	typeref:typename:int
parse_prompt	sources/main/main.c	/^int		parse_prompt(char **envp, t_data **data);$/;"	p	typeref:typename:int	file:
parse_prompt	sources/parsing/parsing.c	/^int	parse_prompt(char **env, t_data **data)$/;"	f	typeref:typename:int
pipe_treatment	sources/parsing/pre_treatment.c	/^static char	*pipe_treatment(char *prompt, int *i_prompt)$/;"	f	typeref:typename:char *	file:
pre_treatment	sources/parsing/pre_treatment.c	/^char	*pre_treatment(char *prompt, int i)$/;"	f	typeref:typename:char *
print_struct	sources/main/main.c	/^void	print_struct(t_data *data, int tab_size)$/;"	f	typeref:typename:void
print_struct	sources/parsing/parsing.c	/^void	print_struct(t_data *data, int tab_size);$/;"	p	typeref:typename:void	file:
print_tab	sources/main/main.c	/^void	print_tab(t_table tab)$/;"	f	typeref:typename:void
print_tab	sources/parsing/parsing.c	/^void	print_tab(t_table tab);$/;"	p	typeref:typename:void	file:
process_env_var_for_export	sources/builtins/export/export_process.c	/^void process_env_var_for_export(t_vars *vars, char *env_var, char **export_tab, int index)$/;"	f	typeref:typename:void
process_export_arg	sources/builtins/export/export_process.c	/^void process_export_arg(int i, t_data *data, t_table *export)$/;"	f	typeref:typename:void
process_full_entry	sources/builtins/export/export_update.c	/^int process_full_entry(t_vars *vars, t_data *data, t_table *export, int i)$/;"	f	typeref:typename:int
process_uncomplete_entry	sources/builtins/export/export_update.c	/^int process_uncomplete_entry(t_vars *vars, t_data *data, t_table *export, int i)$/;"	f	typeref:typename:int
put_address	libft/src/ft_printf_utils.c	/^int	put_address(unsigned long long p, int firstCall)$/;"	f	typeref:typename:int
put_hexa	libft/src/ft_printf_utils.c	/^int	put_hexa(unsigned int x, const char **flag, int firstCall)$/;"	f	typeref:typename:int
put_int	libft/src/ft_printf_utils.c	/^int	put_int(long nbr, int firstCall)$/;"	f	typeref:typename:int
putcharac	libft/src/ft_printf_utils.c	/^int	putcharac(char c)$/;"	f	typeref:typename:int
putstring	libft/src/ft_printf_utils.c	/^int	putstring(char *str)$/;"	f	typeref:typename:int
quote_management	sources/parsing/cleaner.c	/^int		quote_management(t_table args, t_table tmp);$/;"	p	typeref:typename:int	file:
quote_management	sources/parsing/quote_management.c	/^int	quote_management(t_table args, t_table tmp)$/;"	f	typeref:typename:int
quote_treatment	sources/parsing/pre_treatment.c	/^static char	*quote_treatment(char *prompt, int *i_prompt, char c)$/;"	f	typeref:typename:char *	file:
quoting_count	sources/parsing/quote_management.c	/^static bool	quoting_count(char *token, char c)$/;"	f	typeref:typename:bool	file:
read_file	libft/src/get_next_line.c	/^int	read_file(int fd, char *buffer, char **tab)$/;"	f	typeref:typename:int
redir_input	sources/exec/redirections.c	/^static int  redir_input(t_data *data)$/;"	f	typeref:typename:int	file:
redir_output	sources/exec/redirections.c	/^static int	redir_output(t_data *data)$/;"	f	typeref:typename:int	file:
redir_treatment	sources/parsing/pre_treatment.c	/^static char	*redir_treatment(char *prompt, int *i_prompt, char c)$/;"	f	typeref:typename:char *	file:
reset_env	sources/main/main.c	/^static t_data	*reset_env(t_data *data, int tab_size)$/;"	f	typeref:typename:t_data *	file:
set_env	sources/builtins/builtins_utils.c	/^void	set_env(char *key, char *value, char **env)$/;"	f	typeref:typename:void
sig_manager	sources/main/sig_manager.c	/^void    sig_manager(int signum)$/;"	f	typeref:typename:void
simple_quote	sources/parsing/quote_management.c	/^static int	simple_quote(char *token, t_table tmp)$/;"	f	typeref:typename:int	file:
skip_redir_symbol	sources/exec/redirections_utils.c	/^char	*skip_redir_symbol(char *token_file, bool direction)$/;"	f	typeref:typename:char *
skip_spaces	libft/src/ft_atoi.c	/^static	int	skip_spaces(const char *nptr)$/;"	f	typeref:typename:int	file:
skip_spaces	sources/parsing/pre_treatment_utils.c	/^void	skip_spaces(char *str, int *i)$/;"	f	typeref:typename:void
sort_tab	sources/builtins/builtins_utils.c	/^void	sort_tab(t_table *table)$/;"	f	typeref:typename:void
split_tokens	sources/parsing/tokenizer.c	/^static int	split_tokens(char *prompt, int *i, t_table *token)$/;"	f	typeref:typename:int	file:
token_cleaner	sources/parsing/cleaner.c	/^int	token_cleaner(t_data *data)$/;"	f	typeref:typename:int
tokenizer	sources/parsing/tokenizer.c	/^t_table	tokenizer(char *prompt)$/;"	f	typeref:typename:t_table
trim_left	libft/src/ft_strtrim.c	/^static int	trim_left(char const *s1, char const *set)$/;"	f	typeref:typename:int	file:
trim_right	libft/src/ft_strtrim.c	/^static int	trim_right(char const *s1, char const *set)$/;"	f	typeref:typename:int	file:
update_or_add_to_env	sources/builtins/export/export_update.c	/^int update_or_add_to_env(char *new_var, t_table *table)$/;"	f	typeref:typename:int
update_or_add_to_export	sources/builtins/export/export_update.c	/^int update_or_add_to_export(char *new_var, t_table *table)$/;"	f	typeref:typename:int
update_table	sources/builtins/export/export_utils.c	/^void update_table(char **table, int i, char *new_var)$/;"	f	typeref:typename:void
var_exist	sources/parsing/getenv.c	/^static char	*var_exist(char *word, char **env)$/;"	f	typeref:typename:char *	file:
wait_all	sources/exec/exec_utils.c	/^int wait_all(t_data *data, int tab_size, int pid)$/;"	f	typeref:typename:int
